name: 🚀 Deploy AWS EC2 Instances (Sem Docker)

on:
  push:
    branches:
      - main

env:
  ACCESS_TOKEN_EXPIRE_MINUTES: 30

jobs:
  deploy-postgres:
    name: Deploy PostgreSQL
    runs-on: ubuntu-latest
    steps:
      - name: Configurar SSH key
        run: |
          echo "${{ secrets.ACADEMY_KEY_PEM }}" > academy-key.pem
          chmod 400 academy-key.pem

      - name: Instalar e configurar PostgreSQL na EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i academy-key.pem ubuntu@${{ secrets.EC2_POSTGRES_IP }} << 'EOF'
            sudo apt update
            sudo apt install -y postgresql postgresql-contrib
            sudo systemctl enable postgresql
            sudo systemctl start postgresql

            # Ajusta senha do usuário postgres
            sudo -u postgres psql -c "ALTER USER postgres PASSWORD '${{ secrets.POSTGRES_PASSWORD }}';"

            # Cria o banco "api" somente se ainda não existir
            sudo -u postgres psql -lqt \
              | cut -d \| -f 1 \
              | grep -qw api \
              || sudo -u postgres psql -c "CREATE DATABASE api;"

          EOF

  deploy-mongo:
    name: Deploy MongoDB
    runs-on: ubuntu-latest
    needs: deploy-postgres
    steps:
      - name: Configurar SSH key
        run: |
          echo "${{ secrets.ACADEMY_KEY_PEM }}" > academy-key.pem
          chmod 400 academy-key.pem

      - name: Instalar e configurar MongoDB na EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i academy-key.pem ubuntu@${{ secrets.EC2_MONGO_IP }} << 'EOF'
            # 1) Baixa e armazena a chave GPG no keyring
            wget -qO - https://www.mongodb.org/static/pgp/server-6.0.asc \
              | sudo tee /usr/share/keyrings/mongodb-archive-keyring.gpg > /dev/null

            # 2) Detecta o codename (jammy, focal etc.)
            CODENAME=$(lsb_release -sc)

            # 3) Adiciona o repositório oficial com signed-by
            echo "deb [ arch=amd64,arm64 signed-by=/usr/share/keyrings/mongodb-archive-keyring.gpg ] \
              https://repo.mongodb.org/apt/ubuntu $CODENAME/mongodb-org/6.0 multiverse" \
              | sudo tee /etc/apt/sources.list.d/mongodb-org-6.0.list

            # 4) Atualiza índices e instala
            sudo apt update
            sudo apt install -y mongodb-org

            # 5) Habilita e inicia o serviço
            sudo systemctl enable mongod
            sudo systemctl start mongod
          EOF


  deploy-mqtt:
    name: Deploy Mosquitto
    runs-on: ubuntu-latest
    needs: deploy-mongo
    steps:
      - name: Configurar SSH key
        run: |
          echo "${{ secrets.ACADEMY_KEY_PEM }}" > academy-key.pem
          chmod 400 academy-key.pem

      - name: Instalar e configurar Mosquitto na EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i academy-key.pem ubuntu@${{ secrets.EC2_MQTT_IP }} << 'EOF'
            sudo apt update
            sudo apt install -y mosquitto
            sudo systemctl enable mosquitto
            sudo systemctl restart mosquitto
          EOF

  deploy-backend-1:
    name: Deploy Backend (Instância 1)
    runs-on: ubuntu-latest
    needs: [deploy-postgres, deploy-mongo, deploy-mqtt]
    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Configurar SSH key
        run: |
          echo "${{ secrets.ACADEMY_KEY_PEM }}" > academy-key.pem
          chmod 400 academy-key.pem

      - name: Sincronizar código via rsync
        run: |
          rsync -av --delete --exclude='.git' -e "ssh -o StrictHostKeyChecking=no -i academy-key.pem" \
            ./ ubuntu@${{ secrets.EC2_BACKEND_IP_1 }}:/home/ubuntu/app

      - name: Instalar dependências e rodar FastAPI
        run: |
          ssh -o StrictHostKeyChecking=no -i academy-key.pem ubuntu@${{ secrets.EC2_BACKEND_IP_1 }} << 'EOF'
            sudo apt update
            sudo apt install -y python3 python3-venv python3-pip

            cd /home/ubuntu/app

            python3 -m venv venv
            source venv/bin/activate

            if [ -f requirements.txt ]; then
              pip install -r requirements.txt
            else
              pip install fastapi uvicorn sqlalchemy psycopg2-binary
            fi

            if [ -f .env.sample ]; then
              cp .env.sample .env
            fi

            sed -i "s|DATABASE_URL=.*|DATABASE_URL='${{ secrets.DATABASE_URL }}'|" .env
            sed -i "s|MONGO_URI=.*|MONGO_URI='${{ secrets.MONGO_URI }}'|" .env
            sed -i "s|MQTT_BROKER=.*|MQTT_BROKER='${{ secrets.MQTT_BROKER }}'|" .env
            sed -i "s|SECRET_KEY=.*|SECRET_KEY='${{ secrets.SECRET_KEY }}'|" .env
            sed -i "s|ACCESS_TOKEN_EXPIRE_MINUTES=.*|ACCESS_TOKEN_EXPIRE_MINUTES=$ACCESS_TOKEN_EXPIRE_MINUTES|" .env

            pkill -f "uvicorn main:app" || true

            nohup venv/bin/uvicorn main:app --host 0.0.0.0 --port 8000 --reload > uvicorn.log 2>&1 &

            exit
          EOF
