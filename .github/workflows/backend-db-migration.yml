name: CI/CD - Migração de Banco de Dados (Backend)

on:
  push:
    branches: [ develop, main ]
  pull_request:
    branches: [ main ]

jobs:
  database-migration:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: 1234
          POSTGRES_DB: api_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install alembic psycopg2-binary
        
    - name: Detect schema changes
      env:
        DATABASE_URL: postgresql://postgres:1234@localhost:5432/api_test
      run: |
        # Inicializa o banco de dados de teste
        python -c "from database import Base, engine; Base.metadata.create_all(engine)"
        
        # Verifica se há alterações no schema não refletidas nas migrações
        python -c "
import os
import sys
from sqlalchemy import MetaData, create_engine, inspect
from sqlalchemy.ext.declarative import declarative_base
from alembic.migration import MigrationContext
from alembic.autogenerate import compare_metadata

# Conectar ao banco de dados
engine = create_engine('$DATABASE_URL')
connection = engine.connect()

# Obter metadados do banco atual
metadata = MetaData()
metadata.reflect(bind=engine)

# Obter metadados dos modelos
from models import Base
model_metadata = Base.metadata

# Comparar metadados
context = MigrationContext.configure(connection)
diff = compare_metadata(context, model_metadata)

if diff:
    print('Alterações de schema detectadas:')
    for change in diff:
        print(f'- {change}')
    print('É necessário gerar uma nova migração!')
    sys.exit(1)
else:
    print('Nenhuma alteração de schema detectada.')
    sys.exit(0)
        "
        
    - name: Generate migration (if needed)
      if: failure()
      env:
        DATABASE_URL: postgresql://postgres:1234@localhost:5432/api_test
      run: |
        # Gerar nova migração
        alembic revision --autogenerate -m "auto_migration_$(date +%Y%m%d%H%M%S)"
        
        echo "Nova migração gerada. Por favor, revise o arquivo antes de aplicá-lo em produção."
        
    - name: Upload migration files
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: migration-files
        path: migrations/versions/
