name: ðŸš€ Deploy AWS EC2 (AWS Academy)

on:
  push:
    branches:
      - main

jobs:
  deploy-backend:
    name: Deploy Backend
    runs-on: ubuntu-latest

    steps:
      - name: Checkout do cÃ³digo
        uses: actions/checkout@v4

      - name: Configurar chave SSH
        run: |
          echo "${{ secrets.ACADEMY_KEY_PEM }}" > academy-key.pem
          chmod 400 academy-key.pem

      - name: Copiar e iniciar container no Backend
        run: |
          scp -i academy-key.pem -o StrictHostKeyChecking=no \
            -r . ubuntu@${{ secrets.EC2_BACKEND_IP }}:/home/ubuntu/app
          ssh -i academy-key.pem -o StrictHostKeyChecking=no \
            ubuntu@${{ secrets.EC2_BACKEND_IP }} << 'EOF'
              cd /home/ubuntu/app
              docker build -t teamhive-backend .
              docker stop backend  || true
              docker rm backend    || true
              docker run -d \
                --restart=always \
                --name backend \
                --env-file .env \
                -p 8000:8000 \
                teamhive-backend
            EOF

  deploy-mqtt:
    name: Deploy MQTT Broker
    needs: deploy-backend
    runs-on: ubuntu-latest
    steps:
      - name: Configurar chave SSH
        run: |
          echo "${{ secrets.ACADEMY_KEY_PEM }}" > academy-key.pem
          chmod 400 academy-key.pem

      - name: Atualizar Mosquitto
        run: |
          ssh -i academy-key.pem -o StrictHostKeyChecking=no \
            ubuntu@${{ secrets.EC2_MQTT_IP }} << 'EOF'
              docker pull eclipse-mosquitto:latest
              docker stop mosquitto || true
              docker rm mosquitto   || true
              docker run -d \
                --restart=always \
                --name mosquitto \
                -p 1883:1883 \
                eclipse-mosquitto:latest
            EOF

  # Se vocÃª quiser tambÃ©m reiniciar os bancos:
  deploy-postgres:
    name: Deploy PostgreSQL
    needs: deploy-mqtt
    runs-on: ubuntu-latest
    steps:
      - name: Configurar chave SSH
        run: |
          echo "${{ secrets.ACADEMY_KEY_PEM }}" > academy-key.pem
          chmod 400 academy-key.pem

      - name: Atualizar Postgres + PgBouncer
        run: |
          ssh -i academy-key.pem -o StrictHostKeyChecking=no \
            ubuntu@${{ secrets.EC2_POSTGRES_IP }} << 'EOF'
              docker pull postgres:15-alpine
              docker stop postgres-db || true
              docker rm postgres-db   || true
              docker run -d \
                --restart=always \
                --name postgres-db \
                -p 5432:5432 \
                -e POSTGRES_USER=postgres \
                -e POSTGRES_PASSWORD=SenhaForte! \
                -e POSTGRES_DB=api \
                postgres:15-alpine

              docker pull edoburu/pgbouncer:latest
              docker stop pgbouncer || true
              docker rm pgbouncer   || true
              docker run -d \
                --restart=always \
                --name pgbouncer \
                -p 6432:6432 \
                -e DB_HOST=localhost \
                -e DB_PORT=5432 \
                -e DB_USER=postgres \
                -e DB_PASSWORD=SenhaForte! \
                edoburu/pgbouncer:latest
            EOF

  deploy-mongo:
    name: Deploy MongoDB
    needs: deploy-postgres
    runs-on: ubuntu-latest
    steps:
      - name: Configurar chave SSH
        run: |
          echo "${{ secrets.ACADEMY_KEY_PEM }}" > academy-key.pem
          chmod 400 academy-key.pem

      - name: Atualizar Mongo
        run: |
          ssh -i academy-key.pem -o StrictHostKeyChecking=no \
            ubuntu@${{ secrets.EC2_MONGO_IP }} << 'EOF'
              docker pull mongo:6.0
              docker stop mongodb || true
              docker rm mongodb   || true
              docker run -d \
                --restart=always \
                --name mongodb \
                -p 27017:27017 \
                -e MONGO_INITDB_ROOT_USERNAME=admin \
                -e MONGO_INITDB_ROOT_PASSWORD=SenhaForte! \
                mongo:6.0
            EOF