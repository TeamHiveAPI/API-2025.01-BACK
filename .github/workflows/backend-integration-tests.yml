name: Backend Integration Tests

on:
  push:
    branches: [develop, main]
  pull_request:
    branches: [develop, main]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: hiveuser
          POSTGRES_PASSWORD: hive123
          POSTGRES_DB: api
        ports:
          - 5432:5432
        options: >
          --health-cmd "pg_isready -U hiveuser -d api"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout backend code
        uses: actions/checkout@v4
        with:
          repository: TeamHiveAPI/API-2025.01-BACK
          ref: main
          path: backend

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12.10"

      - name: Install backend dependencies
        working-directory: backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install alembic pytest

      - name: Wait for PostgreSQL
        # Este sleep de 10s é uma precaução. O health check do serviço 'postgres' já ajuda a garantir a prontidão.
        run: sleep 10

      - name: Run migrations
        working-directory: backend
        env:
          # A DATABASE_URL é crucial para o Alembic conectar.
          # Use as credenciais e o host/porta do serviço PostgreSQL no GitHub Actions.
          DATABASE_URL: postgresql://hiveuser:hive123@localhost:5432/api
        run: alembic upgrade head

      - name: Run backend tests
        working-directory: backend
        env:
          # Variáveis obrigatórias que precisam ser passadas explicitamente
          # SECRET_KEY deve ser um segredo do GitHub Actions por segurança!
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          # DATABASE_URL para a aplicação e testes.
          DATABASE_URL: postgresql://hiveuser:hive123@localhost:5432/api

          # Variáveis com valores padrão no config.py.
          # Passá-las aqui é opcional, mas garante que os testes usem esses valores exatos
          # e não dependam dos defaults do código se eles mudarem no futuro.
          ALGORITHM: HS256
          ACCESS_TOKEN_EXPIRE_MINUTES: 30
          REFRESH_TOKEN_EXPIRE_DAYS: 7

          # Se você tiver variáveis adicionais que seu config.py lê de .env e que são importantes para testes,
          # adicione-as aqui também.
        run: pytest
