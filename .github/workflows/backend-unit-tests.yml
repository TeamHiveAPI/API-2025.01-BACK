# name: Backend - Testes Unitários

# on:
#   push:
#     branches: [ feature/*, develop, main ]
#   pull_request:
#     branches: [ develop, main ]

# jobs:
#   unit-tests:
#     runs-on: ubuntu-latest
    
#     services:
#       postgres:
#         image: postgres:15
#         env:
#           POSTGRES_USER: postgres
#           POSTGRES_PASSWORD: 1234
#           POSTGRES_DB: api_test
#         ports:
#           - 5432:5432
#         options: >-
#           --health-cmd pg_isready
#           --health-interval 10s
#           --health-timeout 5s
#           --health-retries 5
    
#     steps:
#     - uses: actions/checkout@v4
    
#     - name: Set up Python 3.11
#       uses: actions/setup-python@v4
#       with:
#         python-version: '3.11'
        
#     - name: Install dependencies
#       run: |
#         python -m pip install --upgrade pip
#         pip install -r requirements.txt
#         pip install pytest pytest-cov httpx
        
#     - name: List test files
#       run: ls -R tests/
        
#     - name: Run unit tests
#       env:
#         DATABASE_URL: postgresql+asyncpg://postgres:1234@localhost:5432/api_test
#       run: |
#         # Executa apenas testes unitários, excluindo testes de integração
#         pytest tests/test_*.py -v --cov=. --cov-report=xml
        
#     - name: Upload coverage report
#       uses: actions/upload-artifact@v4
#       with:
#         name: unit-test-coverage-report
#         path: coverage.xml



name: Backend - Testes Unitários

on:
  push:
    branches: [ feature/*, develop, main ]
  pull_request:
    branches: [ develop, main ]

jobs:
  unit-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio
        
    - name: Check if unit tests exist
      run: |
        if [ ! -d "tests/unit" ] || [ -z "$(find tests/unit -name '*.py' -type f)" ]; then
          echo "No unit tests found in tests/unit/"
          exit 1
        fi
        echo "Unit tests found, proceeding..."
        
    - name: Run unit tests
      env:
        DATABASE_URL: sqlite+aiosqlite:///./test.db
        SECRET_KEY: test-secret-key-for-ci
        ALGORITHM: HS256
        ACCESS_TOKEN_EXPIRE_MINUTES: 30
        REFRESH_TOKEN_EXPIRE_DAYS: 7
      run: |
          # Executa apenas testes unitários da pasta tests/unit/
          pytest tests/unit/ -v --cov=schemas.estacao --cov-report=xml --cov-report=term-missing
        
    - name: Upload coverage report
      uses: actions/upload-artifact@v4 
      with:
        name: unit-test-coverage-report
        path: coverage.xml