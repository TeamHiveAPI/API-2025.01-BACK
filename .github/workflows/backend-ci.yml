# Nome do workflow exibido no GitHub Actions
name: Backend CI

# Define os gatilhos: quando esse workflow deve ser executado
on:
  push:
    branches: [ main, develop ]    # Executa o CI quando um push ocorre nos branches main ou develop
  pull_request:
    branches: [ main, develop ]    # Executa o CI em pull requests destinados a main ou develop

# Primeiro job: execução dos testes unitários
jobs:
  unit-tests:
    name: Testes Unitários                      # Nome visível do job
    runs-on: ubuntu-latest                      # Usa a máquina virtual padrão do GitHub com Ubuntu

    # Serviços auxiliares que o job vai usar — no caso, PostgreSQL
    services:
      postgres:                                 # Cria um container PostgreSQL acessível no job
        image: postgres:15                      # Versão da imagem do PostgreSQL usada
        env:                                    # Variáveis de ambiente para o banco
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: 1234
          POSTGRES_DB: api
        ports:
          - 5432:5432                           # Mapeia a porta 5432 do container para o host
        options: >-                             # Configura verificação de saúde para aguardar o banco subir
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    # Etapas (steps) que o job vai executar
    steps:
      - name: Checkout do código                # Baixa o repositório na máquina do runner
        uses: actions/checkout@v4

      - name: Instalar dependências de sistema  # Instala libpq-dev, necessária para usar psycopg2 com PostgreSQL
        run: |
          sudo apt-get update
          sudo apt-get install -y libpq-dev

      - name: Configurar Python                 # Define a versão do Python no ambiente
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Instalar dependências do projeto  # Instala as dependências listadas no requirements.txt
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Rodar testes unitários com pytest # Executa os testes unitários, assumindo que estão em tests/unit/
        run: pytest tests/unit/

  # Segundo job: execução dos testes de integração
  integration-tests:
    name: Testes de Integração
    runs-on: ubuntu-latest

    # Serviços novamente — aqui temos outro PostgreSQL porque cada job roda isoladamente
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: 1234
          POSTGRES_DB: api
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Instalar dependências de sistema
        run: |
          sudo apt-get update
          sudo apt-get install -y libpq-dev

      - name: Configurar Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Instalar dependências do projeto
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Rodar testes de integração com pytest
        run: pytest tests/integration/
